>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg = BaseGeometry(5)
Traceback (most recent call last):
...
TypeError: BaseGeometry() takes no arguments
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("name", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("age", 0)
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0
>>> bg.integer_validator("distance", -4, 35)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

# integer_validator(self, name, value)
# Validates that value is an integer and greater than 0

# If value is a valid integer, the method does nothing
>>> bg.integer_validator("valid number", 1)

# If value is not an integer, a TypeError is raised
>>> bg.integer_validator("invalid number", "number")
TypeError: invalid number must be an integer

>>> bg.integer_validator("another invalid", True)
TypeError: another invalid must be an integer

# If value is less than or equal to 0, a ValueError is raised
>>> bg.integer_validator("invalid int", -1)
ValueError: invalid int must be greater than 0

>>> bg.integer_validator("invalid int", 0)
ValueError: invalid int must be greater than 0

# If both name and value are not provided, a TypeError is raised
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(None)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

# name is expected to be a string, but any type will be printed in the error message
>>> bg.integer_validator({"a": 1}, (1, 2))
TypeError: {'a': 1} must be an integer

