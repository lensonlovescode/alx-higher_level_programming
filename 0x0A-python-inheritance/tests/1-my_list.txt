"""
Test cases for MyList class that inherits from list.
"""

>>> MyList = __import__('1-my_list').MyList

# Test 1: Check the type of a newly created MyList object
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

# Test 2: Create a MyList object with an iterable and print it
>>> my_list = MyList([1, 2, 3, 4, 5])
>>> print(my_list)
[1, 2, 3, 4, 5]

# Test 3: Passing None should raise a TypeError (NoneType is not iterable)
>>> my_list = MyList(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not iterable

# Test 4: Passing more than one argument should raise a TypeError
>>> MyList([1, 2, 3], [4, 5, 6])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2

# Test 5: Append elements to an empty MyList and print the list
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(56)
>>> my_list.append(112)
>>> my_list.append(0)
>>> my_list.append(-3)
>>> my_list.append(-89)
>>> print(my_list)
[1, 56, 112, 0, -3, -89]

# Test 6: Call MyList.print_sorted() to sort and print the list
>>> MyList.print_sorted(my_list)
[-89, -3, 0, 1, 56, 112]

# Test 7: Modify the first element and sort again
>>> my_list[0] = 5
>>> print(my_list)
[5, 56, 112, 0, -3, -89]
>>> MyList.print_sorted(my_list)
[-89, -3, 0, 5, 56, 112]

# Test 8: Remove an element and sort again
>>> my_list.remove(0)
>>> print(my_list)
[5, 56, 112, -3, -89]
>>> MyList.print_sorted(my_list)
[-89, -3, 5, 56, 112]

# Test 9: Passing extra argument to print_sorted() should raise a TypeError
>>> my_list.print_sorted(5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_sorted() takes 1 positional argument but 2 were given

# Test 10: Call print_sorted() with no arguments
>>> my_list.print_sorted()
[-89, -3, 5, 56, 112]
>>> print(my_list)
[5, 56, 112, -3, -89]

# Test 11: Test sorting of an empty list
>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list.print_sorted()
[]

# Test 12: Test sorting with string elements in the list
>>> my_list.append("Manchester")
>>> my_list.append("Liverpool")
>>> my_list.append("Arsenal")
>>> my_list.append("Aston Villa")
>>> print(my_list)
['Manchester', 'Liverpool', 'Arsenal', 'Aston Villa']
>>> my_list.print_sorted()
['Arsenal', 'Aston Villa', 'Liverpool', 'Manchester']
>>> print(my_list)
['Manchester', 'Liverpool', 'Arsenal', 'Aston Villa']

# Test 13: Adding mixed data types (strings and integers) and trying to sort should raise a TypeError
>>> my_list.append(69)
>>> print(my_list)
['Manchester', 'Liverpool', 'Arsenal', 'Aston Villa', 69]
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/lensonmutugi/alx-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 18, in print_sorted
    print(sorted(self))
TypeError: '<' not supported between instances of 'int' and 'str'

